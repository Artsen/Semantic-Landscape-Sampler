/**
 * React Query hook for fetching cached segment context (top terms, neighbors, metrics).
 */
export interface UseSegmentContextOptions {
    enabled?: boolean;
    k?: number;
    staleTimeMs?: number;
}
export declare function useSegmentContext(segmentId: string | undefined, { enabled, k, staleTimeMs }?: UseSegmentContextOptions): {
    prefetch: (id: string, neighbors?: number) => Promise<void>;
    data: import("../types/run").SegmentContextResponse;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    isPlaceholderData: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    isEnabled: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("../types/run").SegmentContextResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("../types/run").SegmentContextResponse>;
} | {
    prefetch: (id: string, neighbors?: number) => Promise<void>;
    data: import("../types/run").SegmentContextResponse;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    isPlaceholderData: false;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    isEnabled: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("../types/run").SegmentContextResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("../types/run").SegmentContextResponse>;
} | {
    prefetch: (id: string, neighbors?: number) => Promise<void>;
    data: undefined;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    isEnabled: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("../types/run").SegmentContextResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("../types/run").SegmentContextResponse>;
} | {
    prefetch: (id: string, neighbors?: number) => Promise<void>;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    isEnabled: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("../types/run").SegmentContextResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("../types/run").SegmentContextResponse>;
} | {
    prefetch: (id: string, neighbors?: number) => Promise<void>;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    isEnabled: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("../types/run").SegmentContextResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("../types/run").SegmentContextResponse>;
} | {
    prefetch: (id: string, neighbors?: number) => Promise<void>;
    data: import("../types/run").SegmentContextResponse;
    isError: false;
    error: null;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    isPlaceholderData: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    isEnabled: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("../types/run").SegmentContextResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("../types/run").SegmentContextResponse>;
};
